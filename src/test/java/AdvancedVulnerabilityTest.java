import org.junit.Test;
import org.junit.After;

import vehicle.*;
import core.*;

public class AdvancedVulnerabilityTest {

   @Test
   public void testVulnerabilityOnUDS() {
      // Testing vulnerability on an UDS service.
      /*
                      |- PrivEsc(Vulnerability)
      Root(account)---|
           |   _______|  Data
           |  |           |
      UDS_Service <---> Ecu#1 <---> vNet(CAN)
           |                         | |
           |                         | |---> Ecu#2 <---> Sensor/Actuator
      UDS_Dataflow <-----------------                    
      */
      // TARGET: udsService.access & dataflow.respond ENTRY_POINT: UDS_Service.connect
      System.out.println("### " + Thread.currentThread().getStackTrace()[1].getMethodName()); // Printing the test's name

      ECU ecu1 = new ECU ("ECU#1", false, true, true); // Enabled operation mode and message confliction protection
      ECU ecu2 = new ECU ("ECU#2", false, true, true);
      PhysicalMachine phyMachine = new PhysicalMachine ("Sensor/Actuator");
      CANNetwork vNet = new CANNetwork ("CAN");
      ConnectionOrientedDataflow dataflow = new ConnectionOrientedDataflow ("UDS_Dataflow");
      UDSService udsService = new UDSService ("UDS_Service");
      Account root = new Account ("Root");
      Vulnerability privEsc = new Vulnerability ("PrivEsc");
      Data data = new Data ("Data");

      ecu1.addExecutees(udsService);
      ecu1.addVehiclenetworks(vNet);
      ecu1.addData(data);
      ecu2.addVehiclenetworks(vNet);
      ecu2.addPhysicalMachines(phyMachine);
      udsService.addAccount(root);
      udsService.addConnectionVulnerabilities(privEsc);
      privEsc.addPrivileges(root);
      udsService.addDataflows(dataflow);
      vNet.addDataflows(dataflow);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(udsService.connect);
      attacker.attack();

      privEsc.exploit.assertCompromisedWithEffort();
      root.authenticate.assertUncompromised();
      root.compromise.assertCompromisedWithEffort();
      udsService.access.assertCompromisedWithEffort();
      ecu1._ecuConnect.assertCompromisedWithEffort();
      data.requestAccess.assertCompromisedWithEffort();
      dataflow.respond.assertCompromisedWithEffort();

      vNet.accessNetworkLayer.assertUncompromised();
      ecu2.connect.assertUncompromised();
   }

    @After
    public void deleteModel() {
            Asset.allAssets.clear();
            AttackStep.allAttackSteps.clear();
            Defense.allDefenses.clear();
    }

}
